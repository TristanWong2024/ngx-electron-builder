"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildUtil = void 0;
const childProcess = require("child_process");
const treeKill = require("tree-kill");
class BuildUtil {
    static spawn(context, command, args, options) {
        const argsR = args || [];
        const optionsR = options || {};
        const child = childProcess.spawn(process.platform === 'win32' ? `${command}.cmd` : command, argsR, optionsR);
        // @ts-ignore
        child.stdout.on('data', (data) => context.logger.info(data.toString()));
        // @ts-ignore
        child.stderr.on('data', (data) => context.logger.error(data.toString()));
        child.on('close', (code) => {
            context.logger.info(`child process exited with code ${code}`);
        });
        child.on('uncaughtException', (e) => {
            context.logger.error(`uncaughtException: ${e}`);
        });
        return child;
    }
    static killProcess(context, child) {
        return new Promise((resolve) => {
            if (!child || child.killed) {
                return resolve();
            }
            treeKill(child.pid, (e) => {
                console.log(e);
                resolve();
            });
        });
    }
}
exports.BuildUtil = BuildUtil;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQtdXRpbC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsidXRpbC9idWlsZC11dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDhDQUE4QztBQUU5QyxzQ0FBdUM7QUFFdkMsTUFBYSxTQUFTO0lBQ2xCLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBdUIsRUFBRSxPQUFlLEVBQUUsSUFBZSxFQUFFLE9BQXNCO1FBQzFGLE1BQU0sS0FBSyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDekIsTUFBTSxRQUFRLEdBQUcsT0FBTyxJQUFJLEVBQUUsQ0FBQztRQUMvQixNQUFNLEtBQUssR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzdHLGFBQWE7UUFDYixLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFpQyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3JHLGFBQWE7UUFDYixLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFpQyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRXRHLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDdkIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0NBQWtDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDbEUsQ0FBQyxDQUFDLENBQUM7UUFDSCxLQUFLLENBQUMsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDaEMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsc0JBQXNCLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDcEQsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBR0QsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUF1QixFQUFFLEtBQW1CO1FBQzNELE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUMzQixJQUFJLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUU7Z0JBQ3hCLE9BQU8sT0FBTyxFQUFFLENBQUM7YUFDcEI7WUFDRCxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO2dCQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNmLE9BQU8sRUFBRSxDQUFDO1lBQ2QsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSjtBQS9CRCw4QkErQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0J1aWxkZXJDb250ZXh0fSBmcm9tICdAYW5ndWxhci1kZXZraXQvYXJjaGl0ZWN0JztcclxuaW1wb3J0ICogYXMgY2hpbGRQcm9jZXNzIGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xyXG5pbXBvcnQge0NoaWxkUHJvY2VzcywgU3Bhd25PcHRpb25zfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcclxuaW1wb3J0ICogYXMgIHRyZWVLaWxsIGZyb20gJ3RyZWUta2lsbCc7XHJcblxyXG5leHBvcnQgY2xhc3MgQnVpbGRVdGlsIHtcclxuICAgIHN0YXRpYyBzcGF3bihjb250ZXh0OiBCdWlsZGVyQ29udGV4dCwgY29tbWFuZDogc3RyaW5nLCBhcmdzPzogc3RyaW5nW10sIG9wdGlvbnM/OiBTcGF3bk9wdGlvbnMpOiBDaGlsZFByb2Nlc3Mge1xyXG4gICAgICAgIGNvbnN0IGFyZ3NSID0gYXJncyB8fCBbXTtcclxuICAgICAgICBjb25zdCBvcHRpb25zUiA9IG9wdGlvbnMgfHwge307XHJcbiAgICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZFByb2Nlc3Muc3Bhd24ocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJyA/IGAke2NvbW1hbmR9LmNtZGAgOiBjb21tYW5kLCBhcmdzUiwgb3B0aW9uc1IpO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBjaGlsZC5zdGRvdXQub24oJ2RhdGEnLCAoZGF0YTogeyB0b1N0cmluZzogKCkgPT4gc3RyaW5nOyB9KSA9PiBjb250ZXh0LmxvZ2dlci5pbmZvKGRhdGEudG9TdHJpbmcoKSkpO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBjaGlsZC5zdGRlcnIub24oJ2RhdGEnLCAoZGF0YTogeyB0b1N0cmluZzogKCkgPT4gc3RyaW5nOyB9KSA9PiBjb250ZXh0LmxvZ2dlci5lcnJvcihkYXRhLnRvU3RyaW5nKCkpKTtcclxuXHJcbiAgICAgICAgY2hpbGQub24oJ2Nsb3NlJywgKGNvZGUpID0+IHtcclxuICAgICAgICAgICAgY29udGV4dC5sb2dnZXIuaW5mbyhgY2hpbGQgcHJvY2VzcyBleGl0ZWQgd2l0aCBjb2RlICR7Y29kZX1gKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBjaGlsZC5vbigndW5jYXVnaHRFeGNlcHRpb24nLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICBjb250ZXh0LmxvZ2dlci5lcnJvcihgdW5jYXVnaHRFeGNlcHRpb246ICR7ZX1gKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gY2hpbGQ7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHN0YXRpYyBraWxsUHJvY2Vzcyhjb250ZXh0OiBCdWlsZGVyQ29udGV4dCwgY2hpbGQ6IENoaWxkUHJvY2Vzcyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWNoaWxkIHx8IGNoaWxkLmtpbGxlZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0cmVlS2lsbChjaGlsZC5waWQsIChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl19